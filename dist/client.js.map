{"version":3,"sources":["dist/client/ajax.js","dist/client/utilities.js","dist/client/dictionary.js","dist/client/text.js","dist/client/markdown.js","dist/client/index.js"],"names":["define","require","exports","Object","defineProperty","value","Ajax","baseUrl","cacheTimeout","responseTimeout","this","_cache","_requests","prototype","hasOpenRequests","request","urlPath","_this","Promise","resolve","reject","url","cachedResult","Date","getTime","timestamp","server","XMLHttpRequest","isCountingRequest","indexOf","open","timeout","addEventListener","evt","result","response","toString","serverStatus","status","timeStamp","error","Error","send","catchedError","NON_CHARACTER_REGEXP","PATH_REGEXP","SPACE_REGEXP","Utilities","getExtension","filePath","match","exec","getBaseName","getKey","text","replace","trim","toLowerCase","getNorm","getParentPath","path","rotate","c","i","ie","length","charCodeAt","push","String","fromCharCode","join","__extends","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","create","ajax_1","utilities_1","Dictionary","_super","apply","arguments","parse","stringified","categorySplit","dictionarySection","dictionaryPage","split","forEach","line","stringify","markdownPage","markdownSection","keys","headline","category","loadEntry","baseName","pageIndex","FILE_EXTENSION","then","catch","console","Text","_value","endsWith","pattern","textLength","patternLength","lastIndexOf","trimSpaces","text_1","HEADLINE_REGEXP","PAIR_REGEXP","PAGE_REGEXP","PARAGRAPH_REGEXP","Markdown","markdown","_pages","_raw","parsePage","section","page","paragraph","map","get","enumerable","configurable","pages","dictionary_1","markdown_1","__export","m","main"],"mappings":"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","file":"client.js","sourcesContent":["/*---------------------------------------------------------------------------*/\n/* Copyright (c) ORDBOK contributors. All rights reserved.                   */\n/* Licensed under the MIT License. See the LICENSE file in the project root. */\n/*---------------------------------------------------------------------------*/\ndefine('@ordbok/core/ajax',[\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /* *\n     *\n     *  Classes\n     *\n     * */\n    /**\n     * Manages AJAX communication with a server.\n     */\n    var Ajax = /** @class */ (function () {\n        /* *\n         *\n         *  Constructors\n         *\n         * */\n        /**\n         * Creates a new managed AJAX instance.\n         *\n         * @param baseUrl\n         *        Base URL of the server\n         *\n         * @param cacheTimeout\n         *        Use 0 milliseconds to turn off all cache systems\n         *\n         * @param responseTimeout\n         *        Time in milliseconds to wait for a server response\n         */\n        function Ajax(baseUrl, cacheTimeout, responseTimeout) {\n            this._cache = {};\n            this._requests = 0;\n            this.baseUrl = (baseUrl || '');\n            this.cacheTimeout = (cacheTimeout || 3600000);\n            this.responseTimeout = (responseTimeout || 60000);\n        }\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Checks for open requests.\n         */\n        Ajax.prototype.hasOpenRequests = function () {\n            if (this._requests < 0) {\n                this._requests = 0;\n            }\n            return (this._requests > 0);\n        };\n        /**\n         * Requests a server resource.\n         *\n         * @param urlPath\n         *        Base relative path to the requested server resource\n         */\n        Ajax.prototype.request = function (urlPath) {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                var url = _this.baseUrl + urlPath;\n                if (_this.cacheTimeout > 0) {\n                    var cachedResult = _this._cache[url];\n                    var cacheTimeout = (new Date()).getTime() + _this.cacheTimeout;\n                    if (cachedResult &&\n                        cachedResult.timestamp > cacheTimeout) {\n                        resolve(cachedResult);\n                        return;\n                    }\n                    delete _this._cache[url];\n                }\n                var server = new XMLHttpRequest();\n                var isCountingRequest = false;\n                try {\n                    if (_this.cacheTimeout === 0 && url.indexOf('?') === -1) {\n                        server.open('GET', (url + '?' + (new Date()).getTime()), true);\n                    }\n                    else {\n                        server.open('GET', url, true);\n                    }\n                    _this._requests++;\n                    isCountingRequest = true;\n                    server.timeout = _this.responseTimeout;\n                    server.addEventListener('load', function (evt) {\n                        if (isCountingRequest) {\n                            isCountingRequest = false;\n                            _this._requests--;\n                        }\n                        resolve({\n                            result: (server.response || '').toString(),\n                            serverStatus: server.status,\n                            timestamp: evt.timeStamp,\n                            url: url\n                        });\n                    });\n                    server.addEventListener('error', function (evt) {\n                        var error = new Error('error');\n                        error.result = server.response.toString();\n                        error.serverStatus = server.status;\n                        error.timestamp = evt.timeStamp;\n                        error.url = url;\n                        if (isCountingRequest) {\n                            isCountingRequest = false;\n                            _this._requests--;\n                        }\n                        reject(error);\n                    });\n                    server.addEventListener('timeout', function (evt) {\n                        var error = new Error('timeout');\n                        error.result = server.response.toString();\n                        error.serverStatus = server.status;\n                        error.timestamp = evt.timeStamp;\n                        error.url = url;\n                        if (isCountingRequest) {\n                            isCountingRequest = false;\n                            _this._requests--;\n                        }\n                        reject(error);\n                    });\n                    server.send();\n                }\n                catch (catchedError) {\n                    var error = catchedError;\n                    error.result = (server.response || '');\n                    error.timestamp = (new Date()).getTime();\n                    error.serverStatus = server.status;\n                    error.url = url;\n                    if (isCountingRequest) {\n                        isCountingRequest = false;\n                        _this._requests--;\n                    }\n                    reject(error);\n                }\n            });\n        };\n        return Ajax;\n    }());\n    exports.Ajax = Ajax;\n});\n//# sourceMappingURL=ajax.js.map;\n","/*---------------------------------------------------------------------------*/\n/* Copyright (c) ORDBOK contributors. All rights reserved.                   */\n/* Licensed under the MIT License. See the LICENSE file in the project root. */\n/*---------------------------------------------------------------------------*/\ndefine('@ordbok/core/utilities',[\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    /**\n     * Non-character pattern\n     */\n    var NON_CHARACTER_REGEXP = /[^0-9A-Za-z\\u0080-\\uFFFF -]/g;\n    /**\n     * Path pattern\n     */\n    var PATH_REGEXP = /^(.*?)([^\\.\\/]*)([^\\/]*)$/;\n    /**\n     * Space pattern\n     */\n    var SPACE_REGEXP = /\\s+/g;\n    /* *\n     *\n     *  Modules\n     *\n     * */\n    var Utilities;\n    (function (Utilities) {\n        /**\n         * Returns the extension of a file path.\n         *\n         * @param filePath\n         *        File path\n         */\n        function getExtension(filePath) {\n            var match = PATH_REGEXP.exec(filePath);\n            return (match && match[3] || '');\n        }\n        Utilities.getExtension = getExtension;\n        /**\n         * Returns the base name of a file path.\n         *\n         * @param filePath\n         *        File path\n         */\n        function getBaseName(filePath) {\n            var match = PATH_REGEXP.exec(filePath);\n            return (match && match[2] || '');\n        }\n        Utilities.getBaseName = getBaseName;\n        /**\n         * Returns the universal key for the given text.\n         *\n         * @param text\n         *        Text to generate key from\n         */\n        function getKey(text) {\n            return text\n                .replace(NON_CHARACTER_REGEXP, ' ')\n                .trim()\n                .replace(SPACE_REGEXP, '-')\n                .toLowerCase();\n        }\n        Utilities.getKey = getKey;\n        /**\n         * Normalize a text to lower case characters and space only.\n         *\n         * @param text\n         *        Text to filter\n         */\n        function getNorm(text) {\n            return text\n                .replace(NON_CHARACTER_REGEXP, ' ')\n                .trim()\n                .replace(SPACE_REGEXP, ' ')\n                .toLowerCase();\n        }\n        Utilities.getNorm = getNorm;\n        /**\n         * Returns the parent part of the path.\n         *\n         * @param path\n         *        Path with parent\n         */\n        function getParentPath(path) {\n            var match = PATH_REGEXP.exec(path);\n            return (match && match[1] || '');\n        }\n        Utilities.getParentPath = getParentPath;\n        /**\n         * Rotates characters in a text.\n         *\n         * @param text\n         *        Text to rotate\n         */\n        function rotate(text) {\n            var result = [];\n            for (var c = 0, i = 0, ie = text.length; i < ie; ++i) {\n                c = text.charCodeAt(i);\n                if (c > 31 && c < 128) {\n                    c += (c < 80 ? 48 : -48);\n                }\n                result.push(String.fromCharCode(c));\n            }\n            return result.join('');\n        }\n        Utilities.rotate = rotate;\n    })(Utilities = exports.Utilities || (exports.Utilities = {}));\n});\n//# sourceMappingURL=utilities.js.map;\n","/*---------------------------------------------------------------------------*/\n/* Copyright (c) ORDBOK contributors. All rights reserved.                   */\n/* Licensed under the MIT License. See the LICENSE file in the project root. */\n/*---------------------------------------------------------------------------*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\ndefine('@ordbok/core/dictionary',[\"require\", \"exports\", \"./ajax\", \"./utilities\"], function (require, exports, ajax_1, utilities_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /* *\n     *\n     *  Classes\n     *\n     * */\n    /**\n     * Manages dictionary communication with a server.\n     */\n    var Dictionary = /** @class */ (function (_super) {\n        __extends(Dictionary, _super);\n        function Dictionary() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /* *\n         *\n         *  Static Functions\n         *\n         * */\n        /**\n         * Converts a text into a dictionary entry.\n         *\n         * @param stringified\n         *        Dictionary text\n         */\n        Dictionary.parse = function (stringified) {\n            var dictionaryPage = {};\n            var categorySplit;\n            var dictionarySection;\n            stringified\n                .split('\\n')\n                .forEach(function (line) {\n                if (line.indexOf(':') === -1) {\n                    dictionaryPage[line] = dictionarySection = {};\n                    return;\n                }\n                if (!dictionarySection) {\n                    return;\n                }\n                categorySplit = line.split(':', 2);\n                dictionarySection[categorySplit[0]] = categorySplit[1].split(';');\n            });\n            return dictionaryPage;\n        };\n        /**\n         * Converts a Markdown page into a dictionary text.\n         *\n         * @param markdownPage\n         *        Markdown page\n         */\n        Dictionary.stringify = function (markdownPage) {\n            var stringified = [];\n            var markdownSection;\n            Object\n                .keys(markdownPage)\n                .forEach(function (headline) {\n                stringified.push(utilities_1.Utilities.getKey(headline));\n                markdownSection = markdownPage[headline];\n                Object\n                    .keys(markdownSection)\n                    .forEach(function (category) {\n                    return stringified.push(utilities_1.Utilities.getKey(category) + ':' + markdownSection[category].join(';'));\n                });\n            });\n            return stringified.join('\\n');\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Loads a dictionary entry from the server.\n         *\n         * @param baseName\n         *        Base name of the translation file\n         *\n         * @param pageIndex\n         *        Index of the entry page to load\n         */\n        Dictionary.prototype.loadEntry = function (baseName, pageIndex) {\n            var _this = this;\n            if (pageIndex === void 0) { pageIndex = 0; }\n            return new Promise(function (resolve) {\n                _this\n                    .request(utilities_1.Utilities.getKey(baseName) + '-' + pageIndex + Dictionary.FILE_EXTENSION)\n                    .then(function (response) {\n                    if (response instanceof Error ||\n                        response.serverStatus >= 400) {\n                        return undefined;\n                    }\n                    return Dictionary.parse(response.result);\n                })\n                    .catch(function (error) {\n                    console.error(error);\n                    return undefined;\n                })\n                    .then(resolve);\n            });\n        };\n        /* *\n         *\n         *  Static Variables\n         *\n         * */\n        /**\n         * File extension of dictionary entries.\n         */\n        Dictionary.FILE_EXTENSION = '.txt';\n        return Dictionary;\n    }(ajax_1.Ajax));\n    exports.Dictionary = Dictionary;\n});\n//# sourceMappingURL=dictionary.js.map;\n","/*---------------------------------------------------------------------------*/\n/* Copyright (c) ORDBOK contributors. All rights reserved.                   */\n/* Licensed under the MIT License. See the LICENSE file in the project root. */\n/*---------------------------------------------------------------------------*/\ndefine('@ordbok/core/text',[\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    /**\n     * Inclusive space pattern\n     */\n    var SPACE_REGEXP = /\\s+/g;\n    /* *\n     *\n     *  Classes\n     *\n     * */\n    var Text = /** @class */ (function () {\n        /* *\n         *\n         *  Constructors\n         *\n         * */\n        function Text(text) {\n            this._value = text;\n        }\n        /* *\n         *\n         *  Static Functions\n         *\n         * */\n        Text.endsWith = function (text, pattern) {\n            if (text === pattern) {\n                return true;\n            }\n            var textLength = text.length;\n            var patternLength = pattern.length;\n            return (patternLength <= textLength &&\n                text.lastIndexOf(pattern) === textLength - patternLength);\n        };\n        Text.trimSpaces = function (text) {\n            return text.replace(SPACE_REGEXP, ' ').trim();\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        Text.prototype.endsWith = function (pattern) {\n            return Text.endsWith(this._value, pattern);\n        };\n        Text.prototype.trimSpaces = function () {\n            return new Text(Text.trimSpaces(this._value));\n        };\n        return Text;\n    }());\n    exports.Text = Text;\n});\n//# sourceMappingURL=text.js.map;\n","/*---------------------------------------------------------------------------*/\n/* Copyright (c) ORDBOK contributors. All rights reserved.                   */\n/* Licensed under the MIT License. See the LICENSE file in the project root. */\n/*---------------------------------------------------------------------------*/\ndefine('@ordbok/core/markdown',[\"require\", \"exports\", \"./text\"], function (require, exports, text_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /* *\n     *\n     *  Constants\n     *\n     * */\n    /**\n     * Section headline\n     */\n    var HEADLINE_REGEXP = /^(?:#+([\\s\\S]*)|([\\s\\S]*?)\\n(?:={3,}|-{3,}))$/;\n    /**\n     * Key value pair\n     */\n    var PAIR_REGEXP = /^([^\\:\\n\\r\\t\\v]+):([\\s\\S]*)$/;\n    /**\n     * Page separator\n     */\n    var PAGE_REGEXP = /(?:^\\n?|\\n\\n)-{3,}(?:\\n\\n|\\n?$)/;\n    /**\n     * Paragraph separator\n     */\n    var PARAGRAPH_REGEXP = /\\n{2,}/;\n    /* *\n     *\n     *  Classes\n     *\n     * */\n    /**\n     * Markdown parser\n     */\n    var Markdown = /** @class */ (function () {\n        /* *\n         *\n         *  Constructors\n         *\n         * */\n        /**\n         * Parse markdown.\n         *\n         * @param markdown\n         *        Markdown to parse\n         */\n        function Markdown(markdown) {\n            this._pages = [];\n            this._raw = markdown;\n            this.parse(markdown);\n        }\n        /* *\n         *\n         *  Static Functions\n         *\n         * */\n        /**\n         * Internal markdown page parser\n         *\n         * @param markdownPage\n         *        Markdown page\n         */\n        Markdown.parsePage = function (markdownPage) {\n            var page = {};\n            var match;\n            var section;\n            markdownPage\n                .split(PARAGRAPH_REGEXP)\n                .forEach(function (paragraph) {\n                match = HEADLINE_REGEXP.exec(paragraph);\n                if (match) {\n                    page[text_1.Text.trimSpaces(match[1] || match[2])] = section = {};\n                }\n                if (!section) {\n                    return;\n                }\n                match = PAIR_REGEXP.exec(paragraph);\n                if (match) {\n                    section[match[1]] = match[2]\n                        .split(';')\n                        .map(text_1.Text.trimSpaces);\n                }\n            });\n            return page;\n        };\n        Object.defineProperty(Markdown.prototype, \"pages\", {\n            /**\n             * Markdown pages\n             */\n            get: function () {\n                return this._pages;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Markdown.prototype, \"raw\", {\n            /**\n             * Raw markdown\n             */\n            get: function () {\n                return this._raw;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Internal markdown parser\n         *\n         * @param markdown\n         *        Markdown to parse\n         */\n        Markdown.prototype.parse = function (markdown) {\n            var pages = this._pages;\n            markdown\n                .split(PAGE_REGEXP)\n                .forEach(function (page) { return pages.push(Markdown.parsePage(page)); });\n        };\n        return Markdown;\n    }());\n    exports.Markdown = Markdown;\n});\n//# sourceMappingURL=markdown.js.map;\n","/*---------------------------------------------------------------------------*/\n/* Copyright (c) ORDBOK contributors. All rights reserved.                   */\n/* Licensed under the MIT License. See the LICENSE file in the project root. */\n/*---------------------------------------------------------------------------*/\ndefine('@ordbok/core/index',[\"require\", \"exports\", \"./ajax\", \"./dictionary\", \"./markdown\", \"./text\", \"./utilities\"], function (require, exports, ajax_1, dictionary_1, markdown_1, text_1, utilities_1) {\n    \"use strict\";\n    function __export(m) {\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __export(ajax_1);\n    __export(dictionary_1);\n    __export(markdown_1);\n    __export(text_1);\n    __export(utilities_1);\n});\n//# sourceMappingURL=index.js.map;\ndefine('@ordbok/core', ['@ordbok/core/index'], function (main) { return main; });\n\n"]}